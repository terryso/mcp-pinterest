---
description: 
globs: **/*.test.ts, **/*.ts
alwaysApply: false
---
 # TDD Development Rules

## 开发流程
- 遵循 TDD 的三个步骤：
  1. 先写测试（Red）
     - 在编写实现代码之前先写测试
     - 测试应该是失败的
     - 测试代码要简单清晰
     - 一次只测试一个功能点
  
  2. 实现代码（Green）
     - 快速实现功能让测试通过
     - 优先考虑最简单的实现
     - 不考虑代码质量和性能
     - 专注于满足当前测试用例
  
  3. 重构优化（Refactor）
     - 在测试通过的基础上重构代码
     - 改进代码设计和质量
     - 消除重复代码
     - 确保重构后测试仍然通过

## 单元测试规范
- 测试文件组织
  - 测试文件以 .test.ts 结尾
  - 测试文件与被测试文件同名
  - 测试文件与被测试文件在同一目录

- 测试结构
  - 使用 describe 描述测试单元
  - 使用 it/test 描述测试用例
  - 遵循 AAA 模式：
    - Arrange（准备）：准备测试数据和环境
    - Act（执行）：执行被测试的代码
    - Assert（断言）：验证测试结果

- 测试用例编写
  - 每个测试用例只测试一个功能点
  - 测试用例描述清晰明确
  - 使用有意义的测试数据
  - 避免测试用例之间的依赖

- Mock 和 Stub 使用
  - 合理使用 Mock 隔离外部依赖
  - 使用 Stub 模拟数据和行为
  - Mock 对象要符合接口契约
  - 避免过度 Mock

## 最佳实践
- 代码质量
  - 测试代码要如同产品代码一样整洁
  - 避免在测试中使用魔法数字
  - 提取重复的测试代码为辅助函数
  - 使用有意义的变量命名

- 异步测试
  - 正确使用 async/await
  - 处理 Promise 和回调
  - 设置合理的超时时间
  - 清理异步资源

- 持续集成
  - 提交前运行所有测试
  - 定期检查测试覆盖率
  - 及时修复失败的测试
  - 保持测试套件的运行速度